(require picturing-programs)

; make-posn : number(x) number(y) -> posn
; posn-x : posn -> number(x)
; posn-y : posn -> number(y)
; posn? : anything -> boolean

(define where (make-posn 7 12))
where ; (make-posn 7 12)

(posn-x where) ; should be 7
(posn-y where) ; should be 12


#|
(define where (make-posn 7 12))
(check-expect (function-on-posn where) ...)
(check-expect (function-on-posn (make-posn 19 5)) ...)
(define (function-on-posn the-posn)
; the-posn a posn
; (posn-x the-posn) a number (the x coordinate)
; (posn-y the-posn) another number (the y coordinate)
...)
|#


; right-of-100? : posn -> boolean

(check-expect (right-of-100? (make-posn 75 123)) false)
(check-expect (right-of-100? (make-posn 102 123)) true)
(check-expect (right-of-100? (make-posn 100 123)) false)
; borderline case

(define (right-of-100? the-posn)
  ; the-posn a posn
  ; (posn-x the-posn) a number (the x coordinate)
  ; (posn-y the-posn) another number (the y coordinate)
  ; 100 a fixed number weâ€™ll need
  (> (posn-x the-posn) 100))

(define (above-diagonal? the-posn)
  (> (posn-x the-posn) (posn-y the-posn)))

(define (below-diagonal? the-posn)
  (< (posn-x the-posn) (posn-y the-posn)))

(define (diagonal-line the-posn)
  (/ (posn-x the-posn) (posn-y the-posn)))

; distance-to-top-left: posn -> number
(check-within (distance-to-top-left (make-posn 0 0)) 0 .1)
(check-within (distance-to-top-left (make-posn 6 0)) 6 .1)
(check-within (distance-to-top-left (make-posn 0 4.3)) 4.3 .1)
(check-within (distance-to-top-left (make-posn 3 4)) 5 .1)
(check-within (distance-to-top-left (make-posn 4 7)) 8.1 .1)

(define (distance-to-top-left the-point)
  ; the-point a posn
  ; (posn-x the-point) a number (x)
  ; (posn-y the-point) a number (y)
  ; (sqr (posn-x the-point)) a number (x2)
  ; (sqr (posn-y the-point)) a number (y2)
  ; (+ (sqr (posn-x the-point))
  ; (sqr (posn-y the-point))) a number (x2 + y2)
  (sqrt (+ (sqr (posn-x the-point))
           (sqr (posn-y the-point)))))

;; 20.4. WRITING FUNCTIONS ON POSNS

(define (distance-formula here there)
  ; here a posn
  ; there a posn
  ; (posn-x here) a number(x coordinate of here)
  ; (posn-y here) a number(y coordinate of here)
  ; (posn-x there) a number(x coordinate of there)
  ; (posn-y there) a number(y coordinate of there)
  (sqrt(+ (sqr(- (posn-x here) (posn-x there))))(sqr (- (posn-y here) (posn-y there)))))


(define (coordinate-difference the-point)
  (abs(- (posn-x the-point) (posn-y the-point))))

(check-expect (posn=? (make-posn 5 5) (make-posn 5 5)) true)
(check-expect (posn=? (make-posn 6 5) (make-posn 5 5)) false)
(check-expect (posn=? (make-posn 5 5) (make-posn 7 5)) false)
(check-expect (posn=? (make-posn 2 3) (make-posn 4 5)) false)
(check-expect (posn=? (make-posn 4 6) (make-posn 7 2)) false)
(check-expect (posn=? (make-posn 5 7) (make-posn 5 3)) false)
(check-expect (posn=? (make-posn 5 8) (make-posn 5 1)) false)


(define (posn=? posn-1 posn-2)
  (cond [(and(= (posn-x posn-1) (posn-x posn-2)) 
             (= (posn-y posn-1) (posn-y posn-2))) true]
        [else false]))

(define (distance-to-orgin a-posn)
  (sqrt(+ (sqr (posn-x a-posn))(sqr (posn-y a-posn)))))

;; 20.5. FUNCTIONS THAT RETURN POSNS

(check-expect (diagonal-point 0) (make-posn 0 0))
(check-expect (diagonal-point 3.7) (make-posn 3.7 3.7))
(define (diagonal-point coord)
  ; coord a number 3.7
  ; right answer a posn (make-posn 3.7 3.7)
  (make-posn coord coord))

;;
;;

(check-expect (swap-x-y (make-posn 5 10)) (make-posn 10 5))
(define (swap-x-y a-posn)
  (make-posn (posn-y a-posn) (posn-x a-posn)))

;;
;;

(check-expect (scale-posn 3 (make-posn 2 5)) (make-posn 6 15))
(define (scale-posn number a-posn)
  (make-posn (* number (posn-x a-posn)) (* number (posn-y a-posn))))

;;
;;

(check-expect (add-posns (make-posn 3 5) (make-posn 2 7)) (make-posn 5 12))
(define (add-posns posn-1 posn-2)
  (make-posn (+ (posn-x posn-1)(posn-x posn-2)) (+ (posn-y posn-1) (posn-y posn-2))))

;;
;;

(check-expect (sub-posns (make-posn 3 5) (make-posn 2 7)) (make-posn 1 -2))
(define (sub-posns posn-1 posn-2)
  (make-posn (- (posn-x posn-1)(posn-x posn-2)) (- (posn-y posn-1) (posn-y posn-2))))

;;
;;

(check-expect (choose-posn "first" (make-posn 1 2) (make-posn 3 5)) (make-posn 1 3))
(define (choose-posn string posn-1 posn-2)
  (cond [(string=? string "first") (make-posn (posn-x posn-1) (posn-x posn-2))]
        [(string=? string "second") (make-posn (posn-y posn-1) (posn-y posn-2))]))

;; 20.6 Writing animations involving posns

(define WIDTH 300)
(define HEIGHT 300)
(define BACKGROUND (empty-scene WIDTH HEIGHT))
(define DOT (circle 3 "solid" "blue"))

(check-expect (show-picture (make-posn 15 12))
              (place-image DOT 15 12 BACKGROUND))
(check-expect (show-picture (make-posn 27 149))
              (place-image DOT 27 149 BACKGROUND))

(define (show-picture where)
  ; where a posn (make-posn 27 149)
  ; (posn-x where) a number(x) 27
  ; (posn-y where) a number(y) 149
  ; DOT a fixed image (to be placed)
  ; BACKGROUND a fixed image (to use as background)
  ; right answer an image (place-image DOT 27 149 BACKGROUND)
  (place-image DOT
               (posn-x where) (posn-y where)
               BACKGROUND))

;(check-expect (handle-key (make-posn 12 19) "e") (make-posn 12 19))
; ignore "e" by returning the same model we were given
(check-expect (handle-key (make-posn 12 19) "left") (make-posn 11 19))
; move left by decreasing the x coordinate
(check-expect (handle-key (make-posn 12 19) "right") (make-posn 13 19))
(check-expect (handle-key (make-posn 12 19) "up") (make-posn 12 18))
; remember that positive y-values are down
(check-expect (handle-key (make-posn 12 19) "down") (make-posn 12 20))

(define (handle-key where key)
  ; where a posn (make-posn 12 19)
  ; key string
  ; (posn-x where) a number(x) 12
  ; (posn-y where) a number(y) 19
  #|  (cond [ (key=? key "up") ; right answer (make-posn 12 18)
          (add-posns where (make-posn 0 -1))]
        [ (key=? key "down") ; right answer (make-posn 12 20)
          (add-posns where (make-posn 0 1))]
        [ (key=? key "left") ; right answer (make-posn 11 19)
          (add-posns where (make-posn -1 0))]
        [ (key=? key "right") ; right answer (make-posn 13 19)
          (add-posns where (make-posn 1 0))]
        [ else where ]))|#
  (add-posns where
             (cond [(key=? key "up")
                    (make-posn 0 -1)]
                   [(key=? key "down") 
                    (make-posn 0 1)]
                   [(key=? key "left") 
                    (make-posn -1 0)]
                   [(key=? key "right")
                    (make-posn 1 0)]
                   [else where ])))

#|(big-bang (make-posn (/ WIDTH 2) (/ HEIGHT 2))
  (check-with posn?)
  (on-draw show-picture)
  (on-key handle-key))|#

;;
;;

(define blank-screen
  (rectangle 200 200 "solid" "white"))
 
(define (next-dot where)
  (add-posns where
             (cond [(and (>= (posn-x where) 0)
                         (>= (posn-y where) 0)
                         (<= (posn-x where) WIDTH)
                         (<= (posn-y where) HEIGHT))
                    (make-posn (random WIDTH) (random HEIGHT))]
                   [else where])))
                    

(define (old-dot where)
  (place-image DOT
               (random 200)  (random 200)
               blank-screen))

(big-bang (make-posn (random 200) (random 200))
  (check-with posn?)
  (on-tick next-dot 1)
  (on-draw old-dot 200 200))

;(define DOT
;  (circle 4 "solid" "black"))

#|(define blank-screen
  (rectangle 200 200 "solid" "white"))
 
(define (next-dot where)
  (add-posns where
             (cond [(and (<= (posn-x where) WIDTH)
                         (<= (posn-y where) HEIGHT))
                    (make-posn (random WIDTH) (random HEIGHT))]
                   [else where])))
                    

(define (old-dot where)
  (place-image DOT
               (random 200)  (random 200)
               blank-screen))|#

(define win-text (text "Congratulations!" 18 "green"))

(define (mouseclick->posn a-posn x y me)
  (cond [(string=? me "button-down")
         (cond [(> (distance-formula x y) 3) (stop-with a-posn)]
               [else a-posn])]
        [else a-posn]))

#|(define (within-3? a-posn)
  (cond [(and (>=  (- a-posn 3))
        (<= mouseclick->posn (+ a-posn 3))) (stop-with a-posn)]
        [else a-posn]))|#

#|(define (win-game? a-posn x y me)
  (cond [(= mouse-click->posn a-posn) (stop-with a-posn)]
        [else a-posn]))




(big-bang (make-posn (random 200) (random 200))
  (check-with posn?)
  (on-tick next-dot 1)
  (on-draw old-dot 200 200)
  (on-mouse mouseclick->posn))|#

