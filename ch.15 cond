(require picturing-programs)
(require "ch15-pix.rkt")

(define price-per-yard
  5)
(check-expect (yard-price 1)5)
(check-expect (yard-price 2)10)
(define (yard-price yards)
  (* price-per-yard yards))

(define (carpet-price-discount yards)
  (cond [(< yards 100) .00]
        [(and (>= yards 100)
              (< yards 500)) .1]
        [else .2]))

(check-within (carpet-price 99) 495 .01)
(check-within (carpet-price 100) 450 .01)
(check-within (carpet-price 500) 2000 .01) 
(define (carpet-price yards)
  (- (yard-price yards)(* (carpet-price-discount yards) (yard-price yards))))

; thermometer

(define (temp-color temp)
  (cond [(< temp 99) "green"]
        [(and(>= temp 99)
             (< temp 101)) "yellow"]
        [else "red"]))

(define (number->image num)
  (text (number->string num) 18 (temp-color num)))

(define (show-number num)
  (number->image num))

(define (digital-thermometer temp)
  (number->image temp))

; letter-grade

(define (letter-gradee grade)
  (cond [(>= grade 90) "A"]
        [(and (>= grade 80)
              (< grade 90)) "B"]
        [(and (>= grade 70)
              (< grade 80)) "C"]
        [(and (>= grade 60)
              (< grade 70)) "D"]
        [else "F"]))

; who-won

(define (who-won annes-votes bobs-votes charlies-votes)
  (cond [(and (> annes-votes bobs-votes)
              (> annes-votes charlies-votes)) "Anne"]
        [(and (> bobs-votes annes-votes)
              (> bobs-votes charlies-votes)) "Bob"]
        [(and (> charlies-votes annes-votes)
              (> charlies-votes bobs-votes)) "Charlie"]
        [else "tie"]))

; 4-votes->winner

(define (same-votes? vote1 vote2)
  (or (string=? vote1 vote2)
      (string=? vote1 vote2)))

(define (vote-check vote1 vote2)
  (cond [(same-votes? vote1 vote2) "1"]
        [else "0"]))

(define (count-votes-4 canidate vote1 vote2 vote3 vote4)
  (cond[(same-votes? canidate vote4) (+ (string->number (vote-check canidate vote4)) (string->number(vote-check canidate vote1)) (string->number (vote-check canidate vote2)) (string->number (vote-check canidate vote3)))]
       [(same-votes? canidate vote3) (+ (string->number (vote-check canidate vote3)) (string->number(vote-check canidate vote1)) (string->number (vote-check canidate vote2)))]
       [(same-votes? canidate vote2) (+ (string->number (vote-check canidate vote2)) (string->number(vote-check canidate vote1)))]
       [(same-votes? canidate vote1) (string->number (vote-check canidate vote1))]
       [else 0]))

#|(check-expect (4-votes->winner "bob" "bob" "anne" "anne") "tie")
(check-expect (4-votes->winner "bob" "anne" "anne" "anne") "anne")
(check-expect (4-votes->winner "bob" "bob" "bob" "anne") "bob")
(check-expect (4-votes->winner "bob" "charlie" "charlie" "charlie") "charlie")|#
(define (4-votes->winner vote1 vote2 vote3 vote4)
  ...)

(define (card-refund charge)
  (cond [(<= charge 500) (* charge .0025)]
        [(and (> charge 500)
              (< charge 1500)) (+ (* 500 .0025) (* (- charge 500) .005))] 
        [(and (> charge 1500)
              (< charge 2500)) (+ (* 500 .0025) (* 1000 .005) (* (- charge 1500) .0075))]
        [(>= charge 2500) (+ (* 500 .0025) (* 1000 .005) (* 1000 .0075) (* (- charge 2500) .01))]))


; bad-item : string(item) -> image
(define (bad-item item)
  ; item string
  ; (string-append "What’s a " item "?") string
  ; 12 number (font size)
  ; "red" string (text color)
  (text (string-append "What’s a " item "?") 12 "red"))
"Examples of bad-item:"
(check-expect (bad-item "hat") (text  "What’s a hat?" 12 "red"))
(check-expect (bad-item "belt") (text  "What’s a belt?" 12 "red"))
(define (bad-color item color)
  (text (string-append "We don’t have " item " in " color) 12 "red"))

; show-clothing
(check-expect (show-clothing "pants" "black") black-pants)
(check-expect (show-clothing "pants" "navy") navy-pants)
(check-expect (show-clothing "shirt" "white") white-shirt)
(check-expect (show-clothing "shirt" "pink") pink-shirt)
(check-expect (show-clothing "shoes" "pink") pink-shoes)
(check-expect (show-clothing "shoes" "burgundy") burgundy-shoes)
(check-expect (show-clothing "shoes" "navy") navy-shoes)
(check-expect (show-clothing "hat" "black")
              (text "What’s a hat?" 12 "red"))
(check-expect (show-clothing "pants" "burgundy")
              (text "We don’t have pants in burgundy" 12 "red"))

(define (show-clothing item color)
  ; item string
  ; color string
  (cond [ (string=? item "pants")
          (cond [(string=? color "black") black-pants ]
                [(string=? color "navy") navy-pants ]
                [else (bad-color item color) ])]
        [(string=? item "shirt")
         (cond [(string=? color "pink") pink-shirt ]
               [(string=? color "white") white-shirt ]
               [else (bad-color item color) ])]
        [(string=? item "shoes")
         (cond [(string=? color "pink") pink-shoes ]
               [(string=? color "burgundy") burgundy-shoes ]
               [(string=? color "navy") navy-shoes ]
               [else (bad-color item color) ])]
        [ else (bad-item item) ]))

; make-shape
(define (make-shape shape size color)
  (cond [(string=? shape "circle")
         (cond [(string=? size "small")
                (cond [(string=? color "blue") (circle 10 "solid" "blue")]
                      [(string=? color "red") (circle 10 "solid" "red")]
                      [(string=? color "green") (circle 10 "solid" "green")]
                      [else (bad-color shape color)])]
               [(string=? size "medium")
                (cond [(string=? color "blue") (circle 30 "solid" "blue")]
                      [(string=? color "red") (circle 30 "solid" "red")]
                      [(string=? color "green") (circle 30 "solid" "green")]
                      [else (bad-color shape color)])]
               [(string=? size "large")
                (cond [(string=? color "blue") (circle 50 "solid" "blue")]
                      [(string=? color "red") (circle 50 "solid" "red")]
                      [(string=? color "green") (circle 50 "solid" "green")]
                      [else (bad-color shape color)])])]
        [(string=? shape "triangle")
         (cond [(string=? size "small")
                (cond [(string=? color "blue") (triangle 10 "solid" "blue")]
                      [(string=? color "red") (triangle 10 "solid" "red")]
                      [(string=? color "green") (triangle 10 "solid" "green")]
                      [else (bad-color shape color)])]
               [(string=? size "medium")
                (cond [(string=? color "blue") (triangle 30 "solid" "blue")]
                      [(string=? color "red") (triangle 30 "solid" "red")]
                      [(string=? color "green") (triangle 30 "solid" "green")]
                      [else (bad-color shape color)])]
               [(string=? size "large")
                (cond [(string=? color "blue") (triangle 50 "solid" "blue")]
                      [(string=? color "red") (triangle 50 "solid" "red")]
                      [(string=? color "green") (triangle 50 "solid" "green")]
                      [else (bad-color shape color)])])]))

(define (classify thing)
; thing anything
(cond [(image? thing) "image"]
[(string? thing) "string"]
[(number? thing) "number"]
[else "other" ]))


; size
(define (size thing)
  (cond [(number? thing) (abs thing)]
        [(string? thing) (string-length thing)]
        [(image? thing) (* (image-width thing) (image-height thing))]))

; big? : number or string -> string
(define (big? thing)
  ;thing : number or string
  (cond [(number? thing)
         (cond [(> thing 1000) "big"]
               [else "small"])]
        [(string? thing)
         (cond [(> (string-length thing) 10) "big"]
               [else "small"])]))
        
; same

(define (not-same-type1 thing1 thing2)
  (text (string-append "error " (number->string thing1) " is an integer data type and " thing2 " is a string data type. Either remove the quotes or add quotes to the other input. Example... 1 1 or  \"1\" \"1\" ") 12 "red")) 

(define (not-same-type2 thing1 thing2)
  (text (string-append "error " thing1 " is a string data type and " (number->string thing2) " is a number data type. Either remove the quotes or add quotes to the other input. Example... 1 1 or  \"1\" \"1\" ") 12 "red"))

(define (same? arg1 arg2)
  (cond [(and (number? arg1)
              (string? arg2)) (not-same-type1 arg1 arg2)]
        [(and (string? arg1)
              (number? arg2)) (not-same-type2 arg1 arg2)]
        [(and(number? arg1)
             (number? arg2))
         (cond [(= arg1 arg2) "same"]
               [else "not the same"])]
        [(and (string? arg1)
              (string? arg2))
         (cond [(string=? arg1 arg2) "same"]
               [else "not the same"])])) 

; smart-add
(define (smart-add arg1 arg2)
  (cond [(and (number? arg1)
              (string? arg2)) (+ arg1 (string->number arg2))]
        [(and (string? arg1)
              (number? arg2)) (+ (string->number arg1) arg2)]
        [(and (number? arg1)
              (number? arg2)) (+ arg1 arg2)]
        [(and (string? arg1)
              (string? arg2)) (+ (string->number arg1) (string->number arg2))]))

         
