(require picturing-programs)

(define price-per-yard
  5)
(check-expect (yard-price 1)5)
(check-expect (yard-price 2)10)
(define (yard-price yards)
  (* price-per-yard yards))

(define (carpet-price-discount yards)
  (cond [(< yards 100) .00]
        [(and (>= yards 100)
              (< yards 500)) .1]
        [else .2]))

(check-within (carpet-price 99) 495 .01)
(check-within (carpet-price 100) 450 .01)
(check-within (carpet-price 500) 2000 .01) 
(define (carpet-price yards)
  (- (yard-price yards)(* (carpet-price-discount yards) (yard-price yards))))

; thermometer

(define (temp-color temp)
  (cond [(< temp 99) "green"]
        [(and(>= temp 99)
             (< temp 101)) "yellow"]
        [else "red"]))

(define (number->image num)
  (text (number->string num) 18 (temp-color num)))

(define (show-number num)
  (number->image num))

(define (digital-thermometer temp)
  (number->image temp))

; letter-grade

(define (letter-gradee grade)
  (cond [(>= grade 90) "A"]
        [(and (>= grade 80)
              (< grade 90)) "B"]
        [(and (>= grade 70)
              (< grade 80)) "C"]
        [(and (>= grade 60)
              (< grade 70)) "D"]
        [else "F"]))

; who-won

(define (who-won annes-votes bobs-votes charlies-votes)
  (cond [(and (> annes-votes bobs-votes)
              (> annes-votes charlies-votes)) "Anne"]
        [(and (> bobs-votes annes-votes)
              (> bobs-votes charlies-votes)) "Bob"]
        [(and (> charlies-votes annes-votes)
              (> charlies-votes bobs-votes)) "Charlie"]
        [else "tie"]))

; 4-votes->winner

(define (same-votes? vote1 vote2)
  (or (string=? vote1 vote2)
      (string=? vote1 vote2)))

(define (vote-check vote1 vote2)
  (cond [(same-votes? vote1 vote2) "1"]
        [else "0"]))

(define (count-votes-4 canidate vote1 vote2 vote3 vote4)
  (cond[(same-votes? canidate vote4) (+ (string->number (vote-check canidate vote4)) (string->number(vote-check canidate vote1)) (string->number (vote-check canidate vote2)) (string->number (vote-check canidate vote3)))]
       [(same-votes? canidate vote3) (+ (string->number (vote-check canidate vote3)) (string->number(vote-check canidate vote1)) (string->number (vote-check canidate vote2)))]
       [(same-votes? canidate vote2) (+ (string->number (vote-check canidate vote2)) (string->number(vote-check canidate vote1)))]
       [(same-votes? canidate vote1) (string->number (vote-check canidate vote1))]
       [else 0]))

#|(check-expect (4-votes->winner "bob" "bob" "anne" "anne") "tie")
(check-expect (4-votes->winner "bob" "anne" "anne" "anne") "anne")
(check-expect (4-votes->winner "bob" "bob" "bob" "anne") "bob")
(check-expect (4-votes->winner "bob" "charlie" "charlie" "charlie") "charlie")|#
(define (4-votes->winner vote1 vote2 vote3 vote4)
  ...)
(define (charge-up-to-500 charge)
  (cond [(< charge 500) (* charge .0025)]
        [else (* charge .0025)]))

(define (charge-between-500-1500 charge)
  (cond [(and(>= charge 500)
             (< charge 1500)) (* charge .005)]
        [else (* charge .005)]))

(define (charge-between-1500-2500 charge)
  (cond [(and (> charge 1500)
              (<= charge 2500)) (* charge .0075)]
        [else (* charge .0075)]))

(define (charge-above-2500 charge)
  (cond [(> charge 2500) (* charge .1)]
        [else (* charge .1)]))



(define (card-refund-calc charge)
  (cond [(> charge 500) (* charge .0025)]
        [(and (> charge 500)
              (<= charge 1500)) .005] 
        [(and (> charge 1500)
              (<= charge 2500)) .0075]
        [(> charge 2500) .01]
        [else .0]))

(define (total-refund charge)
  (+ (* charge (card-refund-calc charge)) )

(define (under-500? charge)
  (< charge 500))
