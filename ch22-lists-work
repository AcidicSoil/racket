(require picturing-programs)
(require racket/base)
(provide (all-defined-out))

(define english (cons "hello" empty))
(define fr-eng (cons "bonjour" english))
(define heb-fr-eng (cons "shalom" fr-eng))
(define shfe (cons "buenos dias" heb-fr-eng))
(define ashfe (cons "salaam" shfe))
(define dwarfs (cons "sleepy" (cons "sneezy" (cons "dopey" (cons "doc"
                                                                 (cons "happy" (cons "bashful" (cons "grumpy" empty))))))))
(define (count-strings L)
  ; L a los
  (cond [(empty? L) 0]
        [(cons? L)
         (+ 1 (count-strings (rest L)))]))

(define (count-numbers L)
  ; L a lon
  (cond [(empty? L) 0]
        [(cons? L)
         (+ 1 (count-numbers (rest L)))]))

; add-up : list-of-numbers -> number
(check-expect (add-up empty) 0)
(check-expect (add-up (cons 14 empty)) 14)
(check-expect (add-up (cons 3 (cons 4 empty))) 7)
(check-expect (add-up (cons 4 (cons 8 (cons -3 empty)))) 9)

(define (add-up L)
  ; L lon
  (cond [(empty? L) 0]
        [(cons? L)
         ; L nelon
         ; (first L) number
         ; (rest L) lon
         ; (add-up (rest L)) number
         (+ (first L) (add-up (rest L)))]))

(define (contains-doll? L)
  (cond [(empty? L) false]
        [(cons? L)
         (or (string=?  (first L) "doll")
             (contains-doll? (rest L)))]))

(define (any-matches? str L)
  (cond [(empty? L) false]
        [(cons? L)
         (or (string=? (first L) str)
             (any-matches? str (rest L)))]))

(define (count-matches obj xs)
  (cond
    [(empty? xs) 0]
    [(cons? xs)
     (+ (count-matches obj (rest xs))
        (cond
          [(equal? (first xs) obj) 1]
          [else 0]))]))

(define (count-votes-for-name s L)
  (cond
    [(empty? L) 0]
    [(cons? L)
     (+ (count-matches s (rest L))
        (cond
          [(equal? (first L) s) 1]
          [else 0]))]))

(define (count-over n L)
  (cond
    [(empty? L) 0]
    [(cons? L)
     (+ (count-over n (rest L))
        (cond
          [(> (first L) n) 1]
          [else 0]))]))

(define (average L)
  (cond
    [(empty? L) 0]
    [(cons? L)
     (/ (+ (first L) (add-up (rest L))) (length L))]))

(define (safe-average L)
  (cond
    [(empty? L) (error 'safe-average " expects numbers in a list, but instead found 0")]
    [(cons? L)
     (/ (+ (first L) (add-up (rest L))) (length L))]))

(define (2-d a b)
   (+ (* 10 a) b))

(define (convert-reversed L)
  (cond
    [(empty? L) 0]
    [else (2-d (convert-reversed (rest L)) (first L))])) 
