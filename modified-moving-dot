;; moving dot world

;; the world allows users to move a dot on the screen using the 
;; arrow keys

;; the world state is the position of the dot
(require picturing-programs)
(provide (all-defined-out))
; constants
(define width 400)
(define height 300)
(define half-w (/ width 2))
(define half-h (/ height 2))
(define dot (circle 10 "solid" "magenta"))
(define blank (empty-scene width height))
(define delta 3)

(define (main duration) 
  (big-bang (make-posn half-w half-h)
            [to-draw show] 
            [on-tick do-nothing 1 duration] 
            [on-key move]
            ))

;; show: posn -> image
;; takes a posn structure and returns a scene with a 
;; a dot at that position
(define (show ws)
  (place-image dot (posn-x ws) (posn-y ws) blank))

;; do-nothing: world state -> world state
;; takes the state of the world and returns it unchanged,
;; for world programs that don't change the world on clock ticks
(define (do-nothing ws) 
  ws)

;; move: posn, key -> posn
;; takes the current world state as a position structure.
;; If the key is "up" or "down", returns the new world state in
;; which the y coordinate of the position is shifted by delta 
;; in the direction of the arrow pressed. 
;; If the key is anything else, returns the world state as is. 
(define (move ws key-pressed) 
  (cond 
    [(key=? key-pressed "up") (make-posn (posn-x ws) (- (posn-y ws) delta))]
    [(key=? key-pressed "down") (make-posn (posn-x ws) (+ (posn-y ws) delta))]
    [(key=? key-pressed "left") (make-posn (- (posn-x ws) delta) (posn-y ws))]
    [(key=? key-pressed "right") (make-posn (+ (posn-x ws) delta) (posn-y ws))]
    [(key=? key-pressed "a") (make-posn (- (posn-x ws) delta)
                                        (+ (posn-y ws) delta))]
    [(key=? key-pressed "b") (make-posn (+ (posn-x ws) delta)
                                        (- (posn-y ws) delta))]
    [(key=? key-pressed " ") (make-posn half-w half-h)]
    [else ws]))
